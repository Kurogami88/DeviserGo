package main

var tpAudit = `
/***
	Author: Leong Kai Khee (Kurogami)
	Date: 2020

	Generated by DeviserGO
***/

package main

import (
	"io/ioutil"
	"net/http"

	"github.com/dgrijalva/jwt-go"
)

// AuditMiddleware add audit logs
func AuditMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context().Value("Authorization")
		token, ok := ctx.(*jwt.Token)
		if ok {
			claims, ok := token.Claims.(jwt.MapClaims)
			if ok {
				user, ok := claims["user"].(string)
				if !ok {
					LogError("[audit.go] Error retrieving user token")
					result := DeviserResponse{HTTPStatus: 400, Result: "Error retrieving user token"}
					result.DoResponse(w)
					return
				}
				api := r.URL.String()

				body, err := ioutil.ReadAll(r.Body)
				if err != nil {
					LogError("[audit.go] Error reading request body")
					result := DeviserResponse{HTTPStatus: 400, Result: "Error reading request body"}
					result.DoResponse(w)
					return
				}
				param := string(body)
				//Reset pointer to initial state
				r.Body = ioutil.NopCloser(bytes.NewBuffer(body))
				
				audit := Audit{
					Username: &user,
					Api:      &api,
					Param:    &param,
				}

				_, err = DBAuditCreate(audit)
				if err != nil {
					LogError("[audit.go] Error writing audit log")
					result := DeviserResponse{HTTPStatus: 400, Result: "Error writing audit log"}
					result.DoResponse(w)
					return
				}
			} else {
				LogError("[audit.go] Error casting jwt.MapClaims")
				result := DeviserResponse{HTTPStatus: 400, Result: "Error checking token"}
				result.DoResponse(w)
				return
			}
		} else {
			LogError("[audit.go] Error casting jwt.Token")
			result := DeviserResponse{HTTPStatus: 400, Result: "Error checking token"}
			result.DoResponse(w)
			return
		}

		next.ServeHTTP(w, r)
	})
}
`
