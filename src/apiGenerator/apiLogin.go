package main

var apiLogin = `
/***
	Author: Leong Kai Khee (Kurogami)
	Date: 2020

	Generated by DeviserGO
***/

package main

import (
	"encoding/json"
	"net/http"
	"strings"

	"golang.org/x/crypto/bcrypt"
	"github.com/google/uuid"
)

//LoginInput is the fields expected to be received
type LoginInput struct {
	Username string ` + "`json:\"username\"`" + `
	Password string ` + "`json:\"password\"`" + `
}

//LoginOutput is the fields expected to be sent
type LoginOutput struct {
	Token string ` + "`json:\"token\"`" + ` 
}

//Login is an API to authenticate a user and return a token
func Login(w http.ResponseWriter, r *http.Request) {
	result := DeviserResponse{HTTPStatus: 200, Result: LoginOutput{}}

	var input LoginInput
	json.NewDecoder(r.Body).Decode(&input)

	account, _ := DBAccountRetrieveCondition("username = '" + input.Username + "'")
	if len(account) != 1 {
		result = DeviserResponse{HTTPStatus: 400, Result: "Error logging in"}
		result.DoResponse(w)
		return
	}

	err := bcrypt.CompareHashAndPassword([]byte(*account[0].Password), []byte(input.Password))
	if err != nil {
		result = DeviserResponse{HTTPStatus: 400, Result: "Error logging in"}
		result.DoResponse(w)
		return
	}

	uuid := strings.Replace(uuid.New().String(), "-", "", -1)

	token, err := AuthCreateToken(uuid, *account[0].Username, *account[0].Role)
	if err != nil {
		result = DeviserResponse{HTTPStatus: 400, Result: "Error creating token"}
		result.DoResponse(w)
		return
	}

	dbToken := Token{
		Uuid:     &uuid,
		Username: account[0].Username,
		Role:     account[0].Role,
	}

	_, err = DBTokenCreate(dbToken)
	if err != nil {
		result = DeviserResponse{HTTPStatus: 400, Result: "Error creating token"}
		result.DoResponse(w)
		return
	}

	result.Result = LoginOutput{Token: token}
	
	result.DoResponse(w)
	return
}
`
