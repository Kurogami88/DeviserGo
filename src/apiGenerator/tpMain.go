package main

/* PARSE IN VALUE
1. Redis Import
2. Redis Variable
3. Project Name
4. Redis Initialization
5. CORS Origin Declare
6. HTTP Listener with Option
*/
var tpMain = `/***
	Author: Leong Kai Khee (Kurogami)
	Date: 2020

	Generated by DeviserGO
***/

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	%s
	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/jinzhu/gorm"
	"github.com/joho/godotenv"
)

// DeviserResponse for http response struct
type DeviserResponse struct {
	HTTPStatus int
	Result     interface{}
}

// DoResponse to return the Rest API with the DeviserResponse result
func (dr *DeviserResponse) DoResponse(w http.ResponseWriter) {
	w.WriteHeader(dr.HTTPStatus)
	w.Header().Add("Content-Type", "application/json")
	json.NewEncoder(w).Encode(dr.Result)
}

var db *gorm.DB
%s
func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatalf("Error opening env file: %%v\n", err)
	}

	lf, err := os.OpenFile("%s.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("Error opening log file: %%v\n", err)
	}
	defer lf.Close()
	log.SetOutput(lf)

	// Database
	dbIP := os.Getenv("DB_IP")
	dbPort := os.Getenv("DB_PORT")
	dbName := os.Getenv("DB_NAME")
	dbUser := os.Getenv("DB_USER")
	dbPW := os.Getenv("DB_PW")
	db, err = gorm.Open("mysql", dbUser+":"+dbPW+"@("+dbIP+":"+dbPort+")/"+dbName+"?charset=utf8mb4&parseTime=True")
	if err != nil {
		log.Fatalf("Error connecting to DB: %%v\n", err)
	}
	defer db.Close()
	db.SingularTable(true)
	//db.LogMode(false)
	%s
	myRouter := mux.NewRouter().StrictSlash(true)
	SetRoutes(myRouter)
	%s
	headersOk := handlers.AllowedHeaders([]string{"Accept", "Accept-Language", "Content-Type", "Content-Language", "Origin", "Referer", "User-Agent", "Authorization"})
	methodsOk := handlers.AllowedMethods([]string{
		http.MethodGet,
		http.MethodPost,
		http.MethodPut,
		http.MethodDelete,
	})

	serverIP := os.Getenv("SERVER_IP")
	serverPort := os.Getenv("SERVER_PORT")
	log.Fatal(http.ListenAndServe(serverIP+":"+serverPort, handlers.CORS(%sheadersOk, methodsOk)(myRouter)))
}
`

var tpMainRedisImport = `"strconv"

	"github.com/go-redis/redis"`
var tpMainRedisVar = `var cache *redis.Client
`
var tpMainRedisInit = `
	// Redis
	redisIP := os.Getenv("REDIS_IP")
	redisPort := os.Getenv("REDIS_PORT")
	redisPW := os.Getenv("REDIS_PW")
	redisDB, err := strconv.Atoi(os.Getenv("REDIS_DB"))
	if err != nil {
		log.Fatalf("Error converting Redis DB env: %v\n", err)
	}

	cache = redis.NewClient(&redis.Options{
		Addr:     redisIP + ":" + redisPort,
		Password: redisPW,
		DB:       redisDB,
	})
`
var tpMainCORS = `
	originsOk := handlers.AllowedOrigins([]string{"*"})`
var tpMainCORSListener = `originsOk, `
